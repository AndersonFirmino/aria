module String

  let count = func (str: String) -> Int
    var cnt = 0
    for v in str
      cnt += 1
    end
    cnt
  end

  let first = func (str: String) -> String
    str[0]
  end

  let last = func (str: String) -> String
    str[String.count(str) - 1]
  end

  let lower = func (str: String) -> String
    runtime_tolower(str)
  end

  let upper = func (str: String) -> String
    runtime_toupper(str)
  end

  let capitalize = func (str: String) -> String
    var title = str
    for i, v in str
      if i == 0 || str[i - 1] != nil && str[i - 1] == " "
        title[i] = String.upper(v)
      end
    end
    title
  end

  let reverse = func (str: String) -> String
    var reversed = ""
    for i in String.count(str)-1..0
      reversed += str[i]
    end
    reversed
  end

  let slice = func (str: String, start: Int, length: Int) -> String
    if start < 0 || length < 0
      panic("String.slice() expects positive start and length parameters")
    end

    var sliced = ""
    var chars = 0
    for i, v in str
      if i >= start && chars < length
        sliced += v
        chars += 1
      end
    end
    sliced
  end

  let trim = func (str: String, subset: String) -> String
    var trimmed = str
    var left = false
    var right = false

    for i, v in subset
      if trimmed[0] == v && !left
        trimmed = String.slice(trimmed, 1, String.count(trimmed))
        left = true
      end

      if String.last(trimmed) == v && !right
        trimmed = String.slice(trimmed, 0, String.count(trimmed) - 1)
        right = true
      end

      if left && right
        break
      end
    end

    trimmed
  end

  let trimLeft = func (str: String, subset: String) -> String
    var trimmed = str
    for v in subset
      if trimmed[0] == v
        trimmed = String.slice(trimmed, 1, String.count(trimmed))
        break
      end
    end

    trimmed
  end

  let trimRight = func (str: String, subset: String) -> String
    var trimmed = str
    for v in subset
      if String.last(trimmed) == v
        trimmed = String.slice(trimmed, 0, String.count(trimmed) - 1)
        break
      end
    end

    trimmed
  end

  let join = func (array: Array, glue: String) -> String
    var glued = ""
    for v in array
      glued += v + glue
    end

    if String.count(glued) > String.count(glue)
      return String.slice(glued, 0, String.count(glued) - String.count(glue))
    end

    glued
  end

  let split  = func (str: String, separator: String) -> Array
    let count_sep = String.count(separator)
    var array = []
    var last_index = 0

    for i, v in str
        if String.slice(str, i, count_sep) == separator
          var curr = String.slice(str, last_index, i - last_index)
          if curr != ""
            array[] = curr
          end
          last_index = i + count_sep
        end
    end

    array[] = String.slice(str, last_index, String.count(str))

    array
  end

  let starts? = func (str: String, prefix: String) -> Bool
    if String.count(str) < String.count(prefix)
      return false
    end

    if String.slice(str, 0, String.count(prefix)) == prefix
      return true
    end

    false
  end

  let ends? = func (str: String, suffix: String) -> Bool
    if String.count(str) < String.count(suffix)
      return false
    end

    if String.slice(str, String.count(str) - String.count(suffix), String.count(str)) == suffix
      return true
    end

    false
  end

  let contains? = func (str: String, search: String) -> Bool
    for i, v in str
      if String.slice(str, i, String.count(search)) == search
        return true
      end
    end
    false
  end

  let replace = func (str: String, search: String, replace: String) -> String
    let count_search = String.count(search)
    var rpl = ""
    var last_index = 0

    for i, v in str
      if String.slice(str, i, count_search) == search
        rpl = rpl + String.slice(str, last_index, i - last_index) + replace
        last_index = i + count_search
      end
    end

    rpl + String.slice(str, last_index, String.count(str))
  end

  let match? = func (str: String, regex: String) -> Bool
    runtime_regex_match(str, regex)
  end

end